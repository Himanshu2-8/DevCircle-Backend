// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String     @id @default(uuid())
  username   String     @unique
  email      String     @unique
  password   String
  questions  Question[]
  answers    Answer[]
  votes      Vote[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Question {
  id         String     @id @default(uuid())
  user       User       @relation(fields: [userId], references: [id])
  userId     String
  title      String
  body       String     @db.Text
  category   String?
  answers    Answer[]
  votes      Vote[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Answer {
  id         String     @id @default(uuid())
  user       User       @relation(fields: [userId], references: [id])
  userId     String
  question   Question   @relation(fields: [questionId], references: [id])
  questionId String
  body       String     @db.Text
  votes      Vote[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Vote {
  id         String     @id @default(uuid())
  user       User       @relation(fields: [userId], references: [id])
  userId     String
  question   Question?  @relation(fields: [questionId], references: [id])
  questionId String?
  answer     Answer?    @relation(fields: [answerId], references: [id])
  answerId   String?
  value      Int
  createdAt  DateTime   @default(now())

  @@index([userId, questionId])
  @@index([userId, answerId])
}